on:
  schedule:
    - cron: "30 13 * * *" # TEMPORAIRE, remettre √† * 20 * * * apr√®s les tests

name: Periodic tests
jobs:
  perf_tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Building backend service
        run: |
          docker compose \
          -f compose.yml \
          -f compose.testing.yml \
          build backend

      - name: Run performance tests
        run: |
          docker compose \
            -f compose.yml \
            -f compose.testing.yml \
            up --abort-on-container-exit --exit-code-from backend-test

  e2e_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      MYSQL_VERSION: 8.0
      DATABASE_ROOT_PASSWORD: ${{ secrets.DATABASE_ROOT_PASSWORD }}
      DATABASE_ADMIN_PASSWORD: ${{ secrets.DATABASE_ADMIN_PASSWORD }}
      PROJECT_NAME: cicd_project
      PORT_BACK: 3000
      PORT_FRONT: 4200
      PORT_PMA: 8080
    steps:
      - uses: actions/checkout@v3

      - name: Check current deployment status
        run: |
          if [ "${{ vars.DEPLOY_BLOCKED }}" == "true" ]; then
            echo "‚ö†Ô∏è  Les d√©ploiements sont actuellement bloqu√©s suite √† des √©checs de tests e2e pr√©c√©dents"
            echo "üîÑ Ex√©cution des tests e2e pour v√©rifier s'ils passent maintenant..."
          else
            echo "‚úÖ Les d√©ploiements sont autoris√©s"
            echo "üîÑ Ex√©cution des tests e2e de routine..."
          fi

      - name: Build & start full stack for E2E (sans e2e-tests)
        run: |
          docker compose \
            -f compose.yml \
            -f compose.testing.yml \
            up -d --build --wait mysql backend frontend

      - name: Dump backend logs on failure
        if: failure()
        run: |
          echo "=== BACKEND LOGS ==="
          docker compose -f compose.yml -f compose.testing.yml logs backend

      - name: Run E2E spec (dans un conteneur frais)
        id: e2e_test
        run: |
          docker compose \
            -f compose.yml \
            -f compose.testing.yml \
            run --rm e2e-tests

      - name: Block deployments on E2E failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚ùå Tests e2e √©chou√©s - Blocage des d√©ploiements"
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/DEPLOY_BLOCKED \
            -d '{"name":"DEPLOY_BLOCKED","value":"true"}'

      - name: Unblock deployments on E2E success
        if: success() && vars.DEPLOY_BLOCKED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚úÖ Tests e2e r√©ussis - D√©blocage des d√©ploiements"
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/DEPLOY_BLOCKED \
            -d '{"name":"DEPLOY_BLOCKED","value":"false"}'
