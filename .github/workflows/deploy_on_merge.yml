name: Deploy on merge
on:
  push:
    branches:
      - main
      - develop
      - feature/cicd # TEMPORAIRE, supprimer
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test_webhook:
    # if: github.ref == 'refs/heads/main' # TEMPORAIRE, décommenter
    runs-on: ubuntu-latest
    steps:
      - name: Test webhook
        run: |
          curl -v -X POST ${{ secrets.WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{"status":"test","message":"🚀 Webhook de test"}'

  backend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Start development environment
        run: docker compose up -d --build --wait backend

      - name: Run backend unit tests
        run: docker compose exec backend npm run test:unit

  check_secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Validate required secrets
        run: |
          echo "🔍 Validating secrets..."
          # Database secrets
          if [ -z "${{ secrets.DATABASE_ROOT_PASSWORD }}" ]; then
            echo "❌ DATABASE_ROOT_PASSWORD is empty!"
            exit 1
          fi
          if [ -z "${{ secrets.DATABASE_ADMIN_PASSWORD }}" ]; then
            echo "❌ DATABASE_ADMIN_PASSWORD is empty!"
            exit 1
          fi
          # SSH secrets
          if [ -z "${{ secrets.RSA }}" ]; then
            echo "❌ RSA is empty!"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_USER }}" ]; then
            echo "❌ SSH_USER is empty!"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "❌ SSH_HOST is empty!"
            exit 1
          fi
          if [ -z "${{ secrets.WEBHOOK_URL }}" ]; then
            echo "❌ WEBHOOK_URL is empty!"
            exit 1
          fi
          echo "✅ All secrets are valid!"

  deploy_staging:
    needs: [test_webhook, backend_tests, check_secrets]
    # if: github.ref == 'refs/heads/develop' # TEMPORAIRE, décommenter
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: http://cicd.nicolas-delahaie.fr:81

    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.RSA }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Update environment variables for staging
        run: |
          sed -i "s/^DATABASE_ROOT_PASSWORD=.*/DATABASE_ROOT_PASSWORD=${{ secrets.DATABASE_ROOT_PASSWORD }}/" .env
          sed -i "s/^DATABASE_ADMIN_PASSWORD=.*/DATABASE_ADMIN_PASSWORD=${{ secrets.DATABASE_ADMIN_PASSWORD }}/" .env
          sed -i 's/^PORT_FRONT=.*/PORT_FRONT=81/' .env
          sed -i 's/^PORT_BACK=.*/PORT_BACK=3001/' .env
          sed -i 's/^PORT_PMA=.*/PORT_PMA=8081/' .env
          echo "🔧 Environment file updated for staging"

      - name: Deploy files to staging server
        run: |
          rsync -avz --delete . \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/cicd/staging/

      - name: Start staging containers
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            cd /home/cicd/staging

            echo "🚀 Starting services..."
            docker compose \
            -f compose.yml \
            -f compose.staging.yml \
            up -d --build --wait

            echo "📊 Exposed services :"
            docker compose \
            -f compose.yml \
            -f compose.staging.yml \
            ps
          EOF

      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/id_rsa

  deploy_production:
    needs: [test_webhook, backend_tests, check_secrets]
    #if: github.ref == 'refs/heads/main' # TEMPORAIRE, décommenter
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://cicd.nicolas-delahaie.fr

    steps:
      - uses: actions/checkout@v3

      - name: Check if deployments are locked
        uses: github/lock@v2.3.1
        with:
          mode: "check"

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.RSA }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Update environment variables for production
        run: |
          sed -i "s/^DATABASE_ROOT_PASSWORD=.*/DATABASE_ROOT_PASSWORD=${{ secrets.DATABASE_ROOT_PASSWORD }}/" .env
          sed -i "s/^DATABASE_ADMIN_PASSWORD=.*/DATABASE_ADMIN_PASSWORD=${{ secrets.DATABASE_ADMIN_PASSWORD }}/" .env
          sed -i 's/^PORT_FRONT=.*/PORT_FRONT=80/' .env
          sed -i 's/^PORT_BACK=.*/PORT_BACK=3000/' .env
          sed -i 's/^PORT_PMA=.*/PORT_PMA=8080/' .env
          echo "🔧 Environment file updated for production"

      - name: Deploy files to production server
        run: |
          rsync -avz --delete . \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/cicd/production/

      - name: Backup existing production
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            BACKUP_DIR="/home/cicd/backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$BACKUP_DIR"

            if [ -d "/home/cicd/production" ]; then
              cp -r /home/cicd/production "$BACKUP_DIR/"
              echo "✅ Folder copied: $BACKUP_DIR"
            fi

            # Database backup if container exists
            if docker ps --format '{{.Names}}' | grep -q "${PROJECT_NAME}_mysql_prod"; then
              docker exec ${PROJECT_NAME}_mysql_prod \
                mysqldump -u root -p${{ secrets.DATABASE_ROOT_PASSWORD }} ${PROJECT_NAME}_prod > "$BACKUP_DIR/db.sql" || true
            fi
          EOF

      - name: Start production containers
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            cd /home/cicd/production

            echo "🚀 Starting services..."
            docker compose \
            -f compose.yml \
            -f compose.prod.yml \
            up \
            -d \
            --build

            echo "📊 Exposed services :"
            docker compose \
            -f compose.yml \
            -f compose.prod.yml \
            ps
          EOF

      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/id_rsa

  notify_webhook_success:
    if: success()
    needs: deploy_production
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        run: |
          # TEMPORAIRE pour garder les tokens, décommenter
          # curl -X POST ${{ secrets.WEBHOOK_URL }} \
          #   -H "Content-Type: application/json" \
          #   -d '{
          #     "status": "success", 
          #     "message": "✅ Build & deploy completed",
          #     "project": "${{ env.PROJECT_NAME }}",
          #     "version": "${{ github.ref_name }}",
          #     "environment": "production"
          #   }'
            echo "✅ Notification sent successfully"

  notify_webhook_failure:
    if: failure()
    runs-on: ubuntu-latest
    needs: deploy_production
    steps:
      - name: Notify failure
        run: |
          # TEMPORAIRE pour garder les tokens, décommenter
          # curl -X POST ${{ secrets.WEBHOOK_URL }} \
          #   -H "Content-Type: application/json" \
          #   -d '{
          #     "status": "failure", 
          #     "message": "❌ Échec du pipeline CI/CD",
          #     "project": "${{ env.PROJECT_NAME }}",
          #     "version": "${{ github.ref_name }}",
          #     "environment": "production"
          #   }'
          echo "✅ Notification sent successfully"
